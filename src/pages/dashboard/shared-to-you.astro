---
import Dashboard from "../../layouts/Dashboard.astro";
import { openDB } from "../../utils/db";
import { ServicesIcons, ICONS } from "../../constants";
import Services from "../../utils/services";
import { decrypt } from "../../utils/crypto";
import Xterm from "./xterm.astro";

const db = await openDB();

const type = Astro.url.searchParams.get("type") || "";
const search = Astro.url.searchParams.get("search") || "";

const { user } = Astro.locals;
let shared = [];
let filters = [];
let query = "";

if (type === "all_types") {
  if (search) {
    query = `SELECT
         r.*,
         s.expired_at, s.next_rotation, s.shared_by
       FROM shares s
              JOIN eligible_users eu ON s.share_to = eu.id
              JOIN resources r ON s.resource_id = r.id
        WHERE eu.email = ? AND r.name LIKE ? `;
    filters = [user?.email, `%${search}%`];
  } else {
    query = `SELECT
         r.*,
         s.expired_at, s.next_rotation, s.shared_by
       FROM shares s
              JOIN eligible_users eu ON s.share_to = eu.id
              JOIN resources r ON s.resource_id = r.id
        WHERE eu.email = ?`;
    filters = [user?.email];
  }
} else {
  if (search) {
    query = `SELECT
         r.*,
         s.expired_at, s.next_rotation, s.shared_by
       FROM shares s
              JOIN eligible_users eu ON s.share_to = eu.id
              JOIN resources r ON s.resource_id = r.id
        WHERE eu.email = ? AND r.type = ? AND r.name LIKE ?`;
    filters = [user?.email, type, `%${search}%`];
  } else {
    query = `SELECT
         r.*,
         s.expired_at, s.next_rotation, s.shared_by
       FROM shares s
              JOIN eligible_users eu ON s.share_to = eu.id
              JOIN resources r ON s.resource_id = r.id
        WHERE eu.email = ? AND r.type = ?`;
    filters = [user?.email, type];
  }
}

shared = await db.all(query, filters);

const mappedShared = shared.map((v: Record<string, string>) => {
  const keyUsername =
    ["mysql_access", "postgresql_access"].includes(v.type) || v.type === "vm"
      ? "username"
      : "-";

  const keyPassword = ["mysql_access", "postgresql_access"].includes(v.type)
    ? "password"
    : v.type === "vm"
      ? "ssh_key"
      : "-";
  return {
    ...v,
    download: {
      [keyUsername]: decrypt(v.username),
      [keyPassword]: decrypt(v.password),
    },
  };
});
---

<Dashboard pageTitle="Resource">
  <section
    slot="content"
    class="card bg-white w-full rounded-none py-12 px-12 shadow-sm flex flex-col gap-8"
  >
    <div class="flex justify-between items-center gap-4 flex-wrap">
      <h2 class="text-xl font-semibold">Resources Shared to You</h2>
      <div
        class="flex items-center gap-4"
        x-data="{
          search: new URLSearchParams(window.location.search).get('search') || '',
          updateSearch() {
            const params = new URLSearchParams(window.location.search);
            if (this.search) {
              params.set('search', this.search);
            } else {
              params.delete('search');
            }
            window.location.search = params.toString();
          }
  }"
      >
        <label class="input rounded-none w-[220px]">
          <svg
            class="h-[1em] opacity-50"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
          >
            <g
              stroke-linejoin="round"
              stroke-linecap="round"
              stroke-width="2.5"
              fill="none"
              stroke="currentColor"
            >
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.3-4.3"></path>
            </g>
          </svg>
          <input
            type="search"
            class="grow"
            placeholder="Search"
            x-model="search"
            @keydown.enter.prevent="updateSearch"
          />
        </label>
        <label
          class="w-[160px]"
          x-data="{
            type: '',
            updateQueryParam() {
              const params = new URLSearchParams(window.location.search);
              if (this.type) {
                params.set('type', this.type);
              } else {
                params.delete('type');
              }
              window.location.search = params.toString();
            }
          }"
          x-init="type = new URLSearchParams(window.location.search).get('type') || 'all_types'"
        >
          <select
            class="select w-full rounded-none"
            name="type"
            @change="updateQueryParam"
            x-model="type"
          >
            <option value="all_types">All Types</option>
            <option value="aws_iam">AWS Key</option>
            <option value="google_iam"> Google IAM </option>
            <option value="vm">Virtual Machine</option>
            <option value="kubeconfig">Kubeconfig</option>
            <option value="postgresql_access">PostgreSQL Access</option>
            <option value="mysql_access">MySQL Access</option>
          </select>
        </label>
      </div>
    </div>
    <div
      class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 sm:grid-cols-2 grid-cols-1 gap-6"
    >
      {
        mappedShared.length > 0 &&
          mappedShared.map((share: any) => {
            const IconComponent =
              ServicesIcons[share.type as keyof typeof ServicesIcons];
            return (
              <div class="card card-border bg-white rounded-none w-full">
                <div class="card-body flex flex-col justify-between gap-4">
                  <div class="flex justify-between">
                    <h2 class="card-title">{share.name}</h2>
                    <IconComponent class="w-10 h-10" />
                  </div>

                  <div class="flex items-center justify-between gap-3">
                    <p class="text-gray-700">Type</p>
                    <p class="text-right">
                      {Services[share.type as keyof typeof Services]}
                    </p>
                  </div>
                  {["vm"].includes(share.type) && (
                    <div class="flex shares-center justify-between gap-4">
                      <p class="text-gray-700">IP</p>
                      <p class="text-right">{share.host}</p>
                    </div>
                  )}
                  {[
                    "vm",
                    "kubernetes",
                    "mysql_access",
                    "postgresql_access",
                  ].includes(share.type) && (
                    <div class="flex flex-col gap-5">
                      <div
                        class="flex items-center justify-between gap-4"
                        x-data
                      >
                        <p class="text-gray-700">Open in console</p>
                        <a
                          href="#"
                          @click.prevent
                          @click="document.getElementById('xterm-modal').showModal()"
                          class="flex items-center justify-end"
                        >
                          <ICONS.terminal class="fill-black w-5 h-5" />
                        </a>
                      </div>
                      <div
                        data-share-value={JSON.stringify(share.download)}
                        data-name-file={`${share.name}-${share.type}`}
                        x-data="{
                          downloadText() {
                            const raw = $el.dataset.shareValue;
                            const content = JSON.stringify(JSON.parse(raw), null, 2);
                            const blob = new Blob([content], { type: 'application/json' });
                            const url = URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = $el.dataset.nameFile + '.json';
                            a.click();
                            URL.revokeObjectURL(url);
                          }
                        }"
                        class="flex items-center justify-between gap-4"
                      >
                        <p class="text-gray-700">
                          Download Credentials / Config
                        </p>
                        <button
                          @click="downloadText"
                          class="flex items-center justify-end cursor-pointer"
                        >
                          <ICONS.download class="fill-black w-5 h-5" />
                        </button>
                      </div>
                    </div>
                  )}
                  {share.type === "kubernetes" && (
                    <div class="flex items-center justify-between gap-4">
                      <p class="text-gray-700">Kubeconfig</p>
                      <p
                        class="text-gray-700 truncate max-w-xs"
                        title={share.value}
                      >
                        {share.value}
                      </p>
                    </div>
                  )}
                  {["mysql_access", "postgresql_access"].includes(
                    share.type,
                  ) && (
                    <div class="flex flex-col gap-3">
                      <div class="flex justify-between items-center gap-4">
                        <p class="text-gray-700">Host</p>
                        <div class="flex gap-3 items-center" x-data>
                          <p class="text-gray-700 text-right">{share.host}</p>
                          <button
                            data-value={share.host}
                            x-on:click="
                              const value = $el.dataset.value
                              navigator.clipboard.writeText(value)
                                .then(() => console.log('Copied:', value))
                                .catch(err => console.error('Failed to copy:', err));
                            "
                          >
                            <ICONS.copy class="w-4 h-4 cursor-pointer" />
                          </button>
                        </div>
                      </div>
                      <div class="flex justify-between items-center gap-4">
                        <p class="text-gray-700">Username</p>
                        <div class="flex gap-3 items-center" x-data>
                          <p class="text-gray-700 text-right truncate max-w-[90px] overflow-hidden whitespace-nowrap">
                            {decrypt(share.username)}
                          </p>
                          <button
                            data-value={decrypt(share.username)}
                            x-on:click="
                              const value = $el.dataset.value
                              navigator.clipboard.writeText(value)
                                .then(() => console.log('Copied:', value))
                                .catch(err => console.error('Failed to copy:', err));
                            "
                          >
                            <ICONS.copy class="w-4 h-4 cursor-pointer" />
                          </button>
                        </div>
                      </div>
                      <div
                        x-data="{ show: false, password: '' }"
                        x-init="password = $el.dataset.password"
                        data-password={decrypt(share.password)}
                        class="flex justify-between items-center gap-4"
                      >
                        <p class="text-gray-700">Password</p>
                        <div class="flex items-center gap-2">
                          <p class="text-gray-700 text-right truncate max-w-[90px] overflow-hidden whitespace-nowrap">
                            <span x-text="show ? password : '••••••••'" />
                          </p>
                          <button type="button" @click="show = !show">
                            <template x-if="show">
                              <ICONS.eyeclose class="w-5 h-5" />
                            </template>
                            <template x-if="!show">
                              <ICONS.eye class="w-5 h-5" />
                            </template>
                          </button>
                        </div>
                        <button
                          data-value={decrypt(share.password)}
                          x-on:click="
                              const value = $el.dataset.value
                              navigator.clipboard.writeText(value)
                                .then(() => console.log('Copied:', value))
                                .catch(err => console.error('Failed to copy:', err));
                            "
                        >
                          <ICONS.copy class="w-4 h-4 cursor-pointer" />
                        </button>
                      </div>
                    </div>
                  )}
                  <div class="flex justify-between items-center">
                    <p class="text-gray-700">Expired</p>
                    <p class="text-gray-700 text-right">
                      {new Date(share.expired_at)
                        .toLocaleString("en-US", {
                          month: "short",
                          day: "2-digit",
                          year: "numeric",
                        })
                        .replace(", ", "/")}
                    </p>
                  </div>
                  <div class="flex justify-between items-center">
                    <p class="text-gray-700">Next Rotate</p>
                    <p class="text-gray-700 text-right">
                      {new Date(share.next_rotation)
                        .toLocaleString("en-US", {
                          month: "short",
                          day: "2-digit",
                          year: "numeric",
                        })
                        .replace(", ", "/")}
                    </p>
                  </div>
                  <div class="flex justify-between items-center">
                    <p class="text-gray-700">Shared from</p>
                    <p class="text-gray-700 text-right">{share.shared_by}</p>
                  </div>
                </div>
              </div>
            );
          })
      }
    </div>
    <Xterm slot="dialog" />
  </section>
</Dashboard>
<script is:inline>
  const params = new URLSearchParams(window.location.search);
  if (!params.has("type")) {
    params.set("type", "all_types");

    window.location.search = params.toString();
  }
</script>
