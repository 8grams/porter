---
import Forms from "../../../components/Forms.astro";
import { openDB } from "../../../utils/db";
import getStringField from "../../../utils/field_cast";
import { encrypt, decrypt } from "../../../utils/crypto";

const { user } = Astro.locals;
const db = await openDB();

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const type = getStringField(formData, "type");
  const id = getStringField(formData, "id");
  const isUpdate = id !== "";
  let query = "";
  let values: string[] = [];

  if (type === "aws_iam") {
    values = [
      type,
      getStringField(formData, "name"),
      encrypt(getStringField(formData, "username")),
      encrypt(getStringField(formData, "password")),
      user?.email as string,
    ];
    if (isUpdate) {
      query = "UPDATE resources SET type = ?, name = ?, username = ?, password = ?, created_by = ? WHERE id = ?";
      values.push(id);
    } else {
      query = "INSERT INTO resources (type, name, username, password, created_by) VALUES (?, ?, ?, ?, ?)"; 
    }
  } else if (type === "google_iam") {
    values = [
      type,
      getStringField(formData, "name"),
      getStringField(formData, "host"),
      encrypt(getStringField(formData, "password")),
      user?.email as string,
    ];
    if (isUpdate) {
      query = "UPDATE resources SET type = ?, name = ?, host = ?, password = ?, created_by = ? WHERE id = ?";
      values.push(id);
    } else {
      query = "INSERT INTO resources (type, name, host, password, created_by) VALUES (?, ?, ?, ?, ?)";
    }
  } else if (type === "postgresql_access" || type === "mysql_access") {
    if (isUpdate) {
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "host"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
        user?.email as string,
      ];
      query = "UPDATE resources SET type = ?, name = ?, host = ?, username = ?, password = ?, created_by = ? WHERE id = ?";
      values.push(id);
    } else {
      query = "INSERT INTO resources (type, name, host, username, password, created_by) VALUES (?, ?, ?, ?, ?, ?)";
    }
  } else if (type === "vm") {
    values = [
      type,
      getStringField(formData, "name"),
      getStringField(formData, "host"),
      encrypt(getStringField(formData, "password")),
      user?.email as string,
    ];
    if (isUpdate) {
      query = "UPDATE resources SET type = ?, name = ?, host = ?, password = ?, created_by = ? WHERE id = ?";
      values.push(id);
    } else {
      query = "INSERT INTO resources (type, name, host, password, created_by) VALUES (?, ?, ?, ?, ?)";
    }
  } else {
    values = [
      type,
      getStringField(formData, "name"),
      encrypt(getStringField(formData, "password")),
      user?.email as string,
    ];
    if (isUpdate) {
      query = "UPDATE resources SET type = ?, name = ?, password = ?, created_by = ? WHERE id = ?";
      values.push(id);
    } else {
      query = "INSERT INTO resources (type, name, password, created_by) VALUES (?, ?, ?, ?)";
    }
  }
  await db.run(query, values);
  return Astro.redirect("/dashboard/resources");
}

const { id } = Astro.props;

const getCurrentResources =
  id === "create"
    ? null
    : await db.get("SELECT * FROM resources WHERE id = ?", [id]);
---

<dialog slot="dialog" class="modal" id={`modal_resources_${id}`}>
  <div class="modal-box">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >âœ•</button
      >
    </form>
    <Forms
      class="flex flex-col gap-6"
      method="POST"
      data-dialog-id={id}
      data-current-resources={JSON.stringify(getCurrentResources) || {}}
      action="/dashboard/resources/modal-resources"
      x-data="formHandler($el.getAttribute('data-dialog-id'), $el.getAttribute('data-current-resources'))"
    >
      <div class="flex flex-col gap-4">
        <h1
          class="text-xl font-bold"
          x-text="titles[category_name] ? `${titles[category_name]} - ${typeDialog}` : typeDialog"
        >
        </h1>
        <input type="hidden" name="id" value={getCurrentResources?.id || ""} />
        <label>
          <input type="hidden" name="type" :value="category_name" />
          <select
            class="select
          rounded-none
          w-full"
            x-model="category_name"
          >
            <option disabled selected value="">Choose Type</option>
            <option value="aws_iam">AWS IAM</option>
            <option value="google_iam"> Google IAM </option>
            <option value="vm">VM</option>
            <option value="kubernetes">Kubernetes</option>
            <option value="postgresql_access">PostgreSQL Access</option>
            <option value="mysql_access">MySQL Access</option>
          </select>
        </label>
        <div class="flex flex-col gap-6">
          <template x-if="category_name !== ''">
            <label>
              <input
                type="text"
                placeholder="Name"
                name="name"
                class="input w-full rounded-none"
                required
                value={getCurrentResources?.name || ""}
              />
            </label>
          </template>
          <template x-if="category_name === 'aws_iam'">
            <div class="flex flex-col gap-6">
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="username"
                  required
                  placeholder="Access Key ID"
                  value={decrypt(getCurrentResources?.username)}
                  >{decrypt(getCurrentResources?.username)}</textarea
                >
              </label>
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="password"
                  required
                  placeholder="Secret Access Key"
                  value={decrypt(getCurrentResources?.password)}
                  >{decrypt(getCurrentResources?.password)}</textarea
                >
              </label>
            </div>
          </template>
          <template x-if="category_name === 'google_iam'">
            <div class="flex flex-col gap-6">
              <label>
                <input
                  type="text"
                  placeholder="Project ID"
                  name="host"
                  class="input w-full rounded-none"
                  required
                  value={decrypt(getCurrentResources?.host) || ""}
                />
              </label>
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="password"
                  required
                  placeholder="Service Account Key"
                  value={decrypt(getCurrentResources?.password)}
                  >{decrypt(getCurrentResources?.password)}</textarea
                >
              </label>
            </div>
          </template>
          <template x-if="category_name === 'vm'">
            <div class="flex flex-col gap-6">
              <label>
                <input
                  type="text"
                  placeholder="Host"
                  name="host"
                  required
                  value={getCurrentResources?.host || ""}
                  class="input w-full rounded-none"
                />
              </label>
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="password"
                  required
                  placeholder="SSH Key"
                  value={decrypt(getCurrentResources?.password)}
                  >{decrypt(getCurrentResources?.password)}</textarea
                >
              </label>
            </div>
          </template>
          <template x-if="category_name === 'kubernetes'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="password"
                required
                placeholder="Kubeconfig"
                value={decrypt(getCurrentResources?.password)}
                >{decrypt(getCurrentResources?.password)}</textarea
              >
            </label>
          </template>
          <template
            x-if="
              category_name === 'postgresql_access' ||
              category_name === 'mysql_access'
            "
          >
            <div class="flex flex-col gap-6">
              <label>
                <input
                  type="text"
                  placeholder="Host"
                  name="host"
                  required
                  value={(getCurrentResources?.host) || ""}
                  class="input w-full rounded-none"
                />
              </label>
              <label>
                <input
                  type="text"
                  placeholder="Username"
                  name="username"
                  required
                  value={decrypt(getCurrentResources?.username) || ""}
                  class="input w-full rounded-none"
                />
              </label>
              <label class="relative">
                <input
                  type="password"
                  placeholder="Password"
                  name="password"
                  required
                  value={decrypt(getCurrentResources?.password) || ""}
                  class="input w-full rounded-none pr-10"
                  x-ref="passwordInput"
                />
                <button
                  type="button"
                  class="absolute right-3 top-1/2 -translate-y-1/2"
                  x-data="{ show: false }"
                  @click="show = !show; $refs.passwordInput.type = show ? 'text' : 'password'"
                >
                  <svg
                    x-show="!show"
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 opacity-50"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/>
                    <circle cx="12" cy="12" r="3"/>
                  </svg>
                  <svg
                    x-show="show"
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 opacity-50"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/>
                    <path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/>
                    <path d="M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61"/>
                    <line x1="2" x2="22" y1="2" y2="22"/>
                  </svg>
                </button>
              </label>
            </div>
          </template>
        </div>
      </div>
      <button type="submit" class="btn btn-neutral rounded-none w-full">
        Save
      </button>
    </Forms>
  </div>
</dialog>
<script slot="script" is:inline>
  function formHandler(dialogId, getCurrentResources) {
    let parsedKeys = {};
    try {
      parsedKeys = JSON.parse(getCurrentResources || "{}");
    } catch (e) {
      console.error("Failed to parse superuser keys:", e);
    }
    return {
      typeDialog: dialogId === "create" ? "New Resource" : "Update Resource",
      category_name: dialogId === "create" ? "" : parsedKeys?.type,
      titles: {
        aws_iam: "AWS IAM",
        google_iam: "Google IAM",
        vm: "VM",
        kubernetes: "Kubernetes",
        postgresql_access: "PostgreSQL",
        mysql_access: "MySQL",
      },
    };
  }
</script>
