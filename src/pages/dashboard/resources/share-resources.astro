---
import Forms from "../../../components/Forms.astro";
import UsersFilter from "../../../components/UsersFilter.astro";
import { openDB } from "../../../utils/db";
import getStringField from "../../../utils/field_cast";
import calculateExpiryDate from "../../../utils/rotation_date";
import { parseStringArray } from "../../../utils/helpers";
import { createUser } from "../../../utils/share";
import { sendMail } from "../../../utils/mailer";
import Services from "../../../utils/services";
import formValidate from "../../../utils/formValidation";

const { id } = Astro.props;
const { user } = Astro.locals;
const db = await openDB();

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const resourceId = getStringField(formData, "resource_id");
  const role = getStringField(formData, "role");
  const rotationPeriod = getStringField(formData, "rotation_period");
  const expired_at = getStringField(formData, "expired_at");
  const next_rotation = calculateExpiryDate(rotationPeriod, expired_at);
  const share_to = getStringField(formData, "share_to");
  const share_to_array = parseStringArray(share_to);

  const errors: Record<string, string> = {};

  if (
    formValidate.customValidation(share_to_array, (arr: []) =>
      arr.length === 0 ? "invalid" : ""
    )
  ) {
    errors.share_to = "Share To tidak boleh kosong";
  }

  if (formValidate.notEmpty(role)) {
    errors.role = "Role tidak boleh kosong";
  }

  if (formValidate.notEmpty(rotationPeriod)) {
    errors.rotation_period = "Rotation Period tidak boleh kosong";
  }

  if (formValidate.notEmpty(expired_at)) {
    errors.expired_at = "Expired At tidak boleh kosong";
  }

  if (Object.keys(errors).length > 0) {
    return new Response(JSON.stringify({ success: false, errors }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    });
  }

  const values = {
    resourceId,
    role,
    expired_at,
    next_rotation,
    rotationPeriod,
    sharedBy: user?.email,
  };

  const resource = await db.get("SELECT * FROM resources WHERE id = ?", [
    resourceId,
  ]);
  const placeholders = share_to_array.map(() => "?").join(", ");
  const query = `SELECT * FROM eligible_users WHERE id IN (${placeholders})`;
  const shareToUsers = await db.all(query, share_to_array);

  const { username, password } = await createUser(resource, values.role);

  for (let i = 0; i < share_to_array.length; i++) {
    const userId = shareToUsers[i];

    await db.run(
      "INSERT INTO shares (resource_id, host, username, password, share_to, role, expired_at, next_rotation, rotation_period, shared_by) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
      [
        values.resourceId,
        resource.host,
        username,
        password,
        userId.id,
        values.role,
        values.expired_at,
        values.next_rotation,
        values.rotationPeriod,
        values.sharedBy,
      ]
    );

    const resourceName = Services[resource.type as keyof typeof Services];

    await sendMail(
      "noreply@porter.com",
      userId?.email,
      "Resource Shared with You",
      "sr",
      {
        subject: "Resource Shared with You",
        resourceName,
        role,
        expired_at: values.expired_at,
        next_rotation: values.next_rotation,
        rotationPeriod,
        email: user?.email,
        year: new Date().getFullYear(),
      }
    );
  }
  return new Response(
    JSON.stringify({
      success: true,
      redirect: "/dashboard/resources",
    }),
    {
      status: 200,
      headers: { "Content-Type": "application/json" },
    }
  );
}

const eligibleUsers = await db.all("SELECT * FROM eligible_users ");
---

<dialog slot="dialog" class="modal" id="share_resource">
  <div class="modal-box">
    <Forms
      class="flex flex-col gap-6"
      method="POST"
      action="/dashboard/resources/share-resources"
    >
      <h2 class="card-title justify-center">Share Resource</h2>
      <UsersFilter eligibleUsers={eligibleUsers} />
      <input type="hidden" name="resource_id" :value="selectedResourceId" />
      <div class="flex flex-col gap-6">
        <label>
          <select
            class="select select-bordered w-full rounded-none disabled:text-gray-300"
            name="role"
            required
          >
            <option value="" selected disabled>Select permission</option>
            <option value="viewer">Viewer</option>
            <option value="editor">Editor</option>
            <option value="superuser">Superuser</option>
          </select>
        </label>
      </div>
      <div class="flex flex-col gap-6">
        <div x-data="{ selectedDate: '', displayText: 'Expired At' }">
          <button
            type="button"
            popovertarget={`cally-popover${id}`}
            class="input input-border w-full rounded-none"
            id={`cally${id}`}
            style="anchor-name:--cally1"
            x-text="displayText"
          >
            Expired At
          </button>
          <input type="hidden" name="expired_at" x-model="selectedDate" />
          <div
            popover
            id={`cally-popover${id}`}
            class="dropdown bg-base-100 rounded-box shadow-lg"
            style="position-anchor:--cally1"
          >
            <calendar-date
              class="cally"
              name="expired_at"
              @change="selectedDate = $event.target.value; displayText = $event.target.value; $nextTick(() => $el.closest('[x-data]').querySelector('[popover]').hidePopover())"
            >
              <svg
                aria-label="Previous"
                class="fill-current size-4"
                slot="previous"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                ><path d="M15.75 19.5 8.25 12l7.5-7.5"></path></svg
              >
              <svg
                aria-label="Next"
                class="fill-current size-4"
                slot="next"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                ><path d="m8.25 4.5 7.5 7.5-7.5 7.5"></path></svg
              >
              <calendar-month></calendar-month>
            </calendar-date>
          </div>
        </div>
      </div>
      <div class="flex flex-col gap-6">
        <label>
          <select
            class="select select-bordered w-full rounded-none"
            name="rotation_period"
            required
          >
            <option value="" selected disabled>Choose Rotation Period</option>
            <option value="1_week">1 Week</option>
            <option value="2_week">2 Week</option>
            <option value="1_month">1 Month</option>
            <option value="3_month">3 Month</option>
            <option value="6_month">6 Month</option>
            <option value="1_year">1 Year</option>
          </select>
        </label>
      </div>
      <div class="flex gap-4">
        <button
          class="btn btn-neutral btn-outline flex-1 rounded-none"
          type="reset"
          id="cancelAction">Cancel</button
        >
        <button class="btn btn-neutral flex-1 rounded-none" type="submit"
          >Share</button
        >
      </div>
    </Forms>
  </div>
</dialog>
<script type="module" src="https://unpkg.com/cally"></script>
<script is:inline>
  const form = document.querySelector("#share_resource form");

  const cancelButton = document.getElementById("cancelAction");

  cancelButton.addEventListener("click", () => {
    window.formUtils.clearErrors(form);
    document.getElementById("share_resource")?.close();
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    window.formUtils.clearErrors(form);
    const data = new FormData(form);

    try {
      const res = await fetch(form.action, {
        method: "POST",
        body: data,
      });
      const result = await res.json();
      if (!res.ok) {
        if (result.errors) {
          for (const [field, msg] of Object.entries(result.errors)) {
            window.formUtils.showError(form, field, msg);
          }
        } else {
          alert("Terjadi kesalahan");
        }
      } else if (result.success) {
        window.location.href = result.redirect;
      }
    } catch (error) {
      alert("Error jaringan, coba lagi");
    }
  });
</script>
