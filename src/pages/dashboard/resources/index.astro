---
import Dashboard from "../../../layouts/Dashboard.astro";
import { ICONS, ServicesIcons } from "../../../constants";
import ModalResources from "./modal-resources.astro";
import { openDB } from "../../../utils/db";
import Services from "../../../utils/services";
import DeleteResources from "./delete-resources.astro";
import ShareResources from "./share-resources.astro";
import SharedTo from "./shared-to.astro";

const { user } = Astro.locals;
const db = await openDB();

const type = Astro.url.searchParams.get("type") || "";
const search = Astro.url.searchParams.get("search") || "";
const reload = Astro.url.searchParams.get("reload") || "";

let resources = [];
if (type === "all_types") {
  if (search) {
    resources = await db.all(
      `SELECT * FROM resources WHERE name LIKE ? AND created_by = ?`,
      [`%${search}%`, user?.email],
    );
  } else {
    resources = await db.all(`SELECT * FROM resources WHERE created_by = ?`, [
      user?.email,
    ]);
  }
} else {
  if (search) {
    resources = await db.all(
      `SELECT * FROM resources WHERE type = ? AND name LIKE ? AND created_by = ?`,
      [type, `%${search}%`, user?.email],
    );
  } else {
    resources = await db.all(
      `SELECT * FROM resources WHERE type = ? AND created_by = ?`,
      [type, user?.email],
    );
  }
}
---

<Dashboard pageTitle="Resource">
  <section
    slot="content"
    class="card bg-white w-full rounded-none py-12 px-12 shadow-sm flex flex-col gap-8"
  >
    <div class="flex justify-between items-center gap-4 flex-wrap">
      <h2 class="text-xl font-semibold">Resources</h2>
      <div class="flex items-center gap-4">
        <div
          x-data="{
          search: new URLSearchParams(window.location.search).get('search') || '',
          updateSearch() {
            const params = new URLSearchParams(window.location.search);
            if (this.search) {
              params.set('search', this.search);
            } else {
              params.delete('search');
            }
            window.location.search = params.toString();
          }
  }"
        >
          <label class="input rounded-none w-[220px]">
            <svg
              class="h-[1em] opacity-50"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <g
                stroke-linejoin="round"
                stroke-linecap="round"
                stroke-width="2.5"
                fill="none"
                stroke="currentColor"
              >
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.3-4.3"></path>
              </g>
            </svg>

            <input
              type="search"
              class="grow"
              placeholder="Search"
              name="search"
              x-model="search"
              @keydown.enter.prevent="updateSearch"
            />
          </label>
        </div>
        <label
          x-data="{
            type: '',
            updateQueryParam() {
              const params = new URLSearchParams(window.location.search);
              if (this.type) {
                params.set('type', this.type);
              } else {
                params.delete('type');
              }
              window.location.search = params.toString();
            }
          }"
          x-init="type = new URLSearchParams(window.location.search).get('type') || 'all_types'"
        >
          <select
            class="select rounded-none w-full"
            name="type"
            @change="updateQueryParam"
            x-model="type"
          >
            <option value="all_types">All Types</option>
            <option value="aws_iam">AWS Key</option>
            <option value="google_iam"> Google IAM </option>
            <option value="vm">VM</option>
            <option value="kubeconfig">Kubeconfig</option>
            <option value="postgresql_access">PostgreSQL Access</option>
            <option value="mysql_access">MySQL Access</option>
          </select>
        </label>
        <button
          class="btn btn-neutral rounded-none w-[140px]"
          onclick="modal_resources_create.showModal()"
        >
          Create
        </button>
        <ModalResources id="create" />
      </div>
    </div>
    <div class="grid grid-cols-4 gap-6">
      {
        resources.length > 0 &&
          resources.map((resource: any) => {
            const IconComponent =
              ServicesIcons[resource.type as keyof typeof ServicesIcons];
            return (
              <div class="card card-border bg-white rounded-none w-full relative">
                <div class="absolute top-2 -right-1">
                  <div class="dropdown dropdown-end">
                    <button class="btn btn-ghost btn-xs">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="1"/>
                        <circle cx="12" cy="5" r="1"/>
                        <circle cx="12" cy="19" r="1"/>
                      </svg>
                    </button>
                    <ul class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                      <li>
                        <button
                          data-id={resource.id}
                          onclick="document.getElementById('modal_resources_' + this.dataset.id).showModal()"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
                            <path d="m15 5 4 4"/>
                          </svg>
                          Edit
                        </button>
                      </li>
                      <li>
                        <button
                          data-id={resource.id}
                          onclick="document.getElementById('share_resource_' + this.dataset.id).showModal()"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                            <polyline points="16 6 12 2 8 6"/>
                            <line x1="12" y1="2" x2="12" y2="15"/>
                          </svg>
                          Share
                        </button>
                      </li>
                      <li>
                        <button
                          class="text-error"
                          data-id={resource.id}
                          onclick="document.getElementById('delete_resource_modal_' + this.dataset.id).showModal()"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M3 6h18"/>
                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
                            <line x1="10" x2="10" y1="11" y2="17"/>
                            <line x1="14" x2="14" y1="11" y2="17"/>
                          </svg>
                          Delete
                        </button>
                      </li>
                    </ul>
                  </div>
                </div>
                <div class="card-body flex flex-col justify-between gap-4">
                  <div class="flex flex-col gap-4">
                    <div class="flex justify-between">
                      <h2 class="card-title">{resource.name}</h2>
                      <IconComponent class="w-10 h-10" />
                    </div>
                    <div class="flex flex-col gap-3">
                      <div class="flex items-center justify-between gap-4">
                        <p class="text-gray-700">Type</p>
                        <p class="text-right">
                          {Services[resource.type as keyof typeof Services]}
                        </p>
                      </div>
                      {resource.type === "vm" && (
                        <div class="flex items-center justify-between gap-4">
                          <p class="text-gray-700">IP</p>
                          <p class="text-right">{resource.host}</p>
                        </div>
                      )}
                      {["mysql_access", "postgresql_access"].includes(
                        resource.type,
                      ) && (
                        <div class="flex flex-col gap-3">
                          <div class="flex justify-between items-center gap-4">
                            <p class="text-gray-700">Host</p>
                            <p class="text-gray-700 text-right">
                              {resource.host}
                            </p>
                          </div>
                        </div>
                      )}
                      <div class="flex items-center justify-between gap-4">
                        <p class="text-gray-700">Shared to</p>
                        <button
                          class="cursor-pointer flex items-center justify-end"
                          data-id={resource.id}
                          onclick="document.getElementById('shared_to_' + this.dataset.id).showModal()"
                        >
                          <ICONS.users class="fill-black w-5 h-5" />
                        </button>
                        <SharedTo resourceId={resource.id} />
                      </div>
                    </div>
                  </div>
                  <DeleteResources id={resource.id} />
                  <ModalResources id={resource.id} />
                  <ShareResources id={resource.id} />
                </div>
              </div>
            );
          })
      }
    </div>
  </section>
</Dashboard>
<script is:inline>
  const params = new URLSearchParams(window.location.search);
  if (!params.has("type")) {
    params.set("type", "all_types");

    window.location.search = params.toString();
  }
</script>
