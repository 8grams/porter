---
import Dashboard from "../../../layouts/Dashboard.astro";
import ModalSuperuserKeys from "./modal-superuser-keys.astro";
import { openDB } from "../../../utils/db";
import { ICONS } from "../../../constants";
import Services from "../../../utils/services";
import DeleteUserKeys from "./delete-user-keys.astro";
import { decrypt } from "../../../utils/crypto"

const db = await openDB();

const type = Astro.url.searchParams.get("type") || "";
const search = Astro.url.searchParams.get("search") || "";

let superuserKeys = [];
if (type === "all_types") {
  if (search) {
    superuserKeys = await db.all(`SELECT * FROM keys WHERE name LIKE ?`, [
      `%${search}%`,
    ]);
  } else {
    superuserKeys = await db.all(`SELECT * FROM keys`);
  }
} else {
  if (search) {
    superuserKeys = await db.all(
      `SELECT * FROM keys WHERE type = ? AND name LIKE ?`,
      [type, `%${search}%`],
    );
  } else {
    superuserKeys = await db.all(`SELECT * FROM keys WHERE type = ?`, [type]);
  }
}

const mappedSuper = superuserKeys.map((key: any) => {
  return {
    ...key,
    password: decrypt(key.password),
    username: decrypt(key.username),
  }
})
---

<Dashboard pageTitle="Superuser Keys">
  <section
    slot="content"
    class="card bg-white w-full rounded-none py-12 px-12 shadow-sm"
    x-data="{ selectedSuperUserKey: null, selectedSuperUserKeyId: null }"
  >
    <div class="flex justify-between items-center gap-4 flex-wrap">
      <h2 class="text-xl font-semibold">Superuser Keys</h2>
      <div class="flex items-center gap-4">
        <div
          x-data="{
          search: new URLSearchParams(window.location.search).get('search') || '',
          updateSearch() {
            const params = new URLSearchParams(window.location.search);
            if (this.search) {
              params.set('search', this.search);
            } else {
              params.delete('search');
            }
            window.location.search = params.toString();
          }
  }"
        >
          <label class="input rounded-none w-[220px]">
            <svg
              class="h-[1em] opacity-50"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <g
                stroke-linejoin="round"
                stroke-linecap="round"
                stroke-width="2.5"
                fill="none"
                stroke="currentColor"
              >
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.3-4.3"></path>
              </g>
            </svg>

            <input
              type="search"
              class="grow"
              placeholder="Search"
              name="search"
              x-model="search"
              @keydown.enter.prevent="updateSearch"
            />
          </label>
        </div>
        <label
          x-data="{
            type: '',
            updateQueryParam() {
              const params = new URLSearchParams(window.location.search);
              if (this.type) {
                params.set('type', this.type);
              } else {
                params.delete('type');
              }
              window.location.search = params.toString();
            }
          }"
          x-init="type = new URLSearchParams(window.location.search).get('type') || 'all_types'"
        >
          <select
            class="select rounded-none w-full"
            name="type"
            @change="updateQueryParam"
            x-model="type"
          >
            <option value="all_types">All Types</option>
            <option value="aws_key">AWS Key</option>
            <option value="google_services_account">
              Google Services Account
            </option>
            <option value="ssh_private_key">SSH Private Key</option>
            <option value="kubeconfig">Kubeconfig</option>
            <option value="postgresql_access">PostgreSQL Access</option>
            <option value="mysql_access">MySQL Access</option>
          </select>
        </label>
        <button
          class="btn btn-neutral rounded-none w-[140px]"
          @click="selectedSuperUserKey = null; selectedSuperUserKeyId = null; document.getElementById('modal_superuser').showModal()"
        >
          Create
        </button>
      </div>
    </div>
    <div
      class="overflow-x-auto"
      x-data="{
        selected: [],
        toggle(id) {
          if (this.selected.includes(id)) {
            this.selected = this.selected.filter(i => i !== id);
          } else {
            this.selected.push(id);
          }
        },
        isAllSelected() {
          let inputs = document.querySelectorAll(`input[name='eligible_id']`);
          return inputs.length && this.selected.length === inputs.length;
        },
        toggleAll() {
          let inputs = document.querySelectorAll(`input[name='eligible_id']`);
          if (this.isAllSelected()) {
            this.selected = [];
          } else {
            let newSelect = []
            inputs.forEach(i=>{
              newSelect.push(i.value)
            })
            this.selected = newSelect;
          }
        }
      }"
    >
      <div>
        <table class="table">
          <thead>
            <tr>
              <th>
                <input
                  type="checkbox"
                  class="checkbox"
                  :checked="isAllSelected()"
                  @change="toggleAll"
                  x-effect="$el.indeterminate = !isAllSelected() && selected.length"
                />
              </th>
              <th class="text-black">Created At</th>
              <th class="text-black">Name</th>
              <th class="text-black">Type</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {
              mappedSuper.length > 0 &&
              mappedSuper.map((key: any) => (
                  <tr>
                    <td>
                      <input
                        type="checkbox"
                        class="checkbox"
                        name="eligible_id"
                        value={key.id}
                        x-bind:checked="selected.includes($el.value)"
                        @change={`()=>toggle("${key.id}")`}
                      />
                    </td>
                    <td class="text-black">
                      {new Date(key.created_at).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      })}
                    </td>
                    <td class="text-black">{key.name}</td>
                    <td class="text-black">
                      {Services[key.type as keyof typeof Services] ?? "Unknown"}
                    </td>
                    <td class="relative">
                      <div class="flex gap-4 items-center">
                        <button
                          class="cursor-pointer"
                          data-id={key.id}
                          data-key={JSON.stringify(key)}
                          @click="selectedSuperUserKey = JSON.parse($el.dataset.key); selectedSuperUserKeyId = $el.dataset.id; document.getElementById('modal_superuser').showModal()"
                        >
                          <ICONS.edit class="fill-black" />
                        </button>
                        <button
                          class="cursor-pointer"
                          data-id={key.id}
                          @click="selectedSuperUserKeyId = $el.dataset.id; document.getElementById('delete_modal_superuser').showModal()"
                        >
                          <ICONS.delete class="fill-black" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
            }
          </tbody>
        </table>
      </div>
    </div>
    <DeleteUserKeys />
    <ModalSuperuserKeys />
  </section>
</Dashboard>
<script is:inline>
  const params = new URLSearchParams(window.location.search);
  if (!params.has("type")) {
    params.set("type", "all_types");

    window.location.search = params.toString();
  }
</script>
