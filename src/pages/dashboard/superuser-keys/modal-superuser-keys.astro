---
import Forms from "../../../components/Forms.astro";
import getStringField from "../../../utils/field_cast";
import { openDB } from "../../../utils/db";
import { encrypt } from "../../../utils/crypto";
import formValidate from "../../../utils/formValidation";

const db = await openDB();

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const type = getStringField(formData, "type");
  const id = getStringField(formData, "id");
  const isUpdate = id !== "";
  let query = "";
  let values: string[] = [];

  const errors: Record<string, string> = {};

  if (formValidate.notEmpty(type)) {
    errors.type = "Tipe tidak boleh kosong";
  }

  if (type) {
    if (formValidate.notEmpty(getStringField(formData, "name"))) {
      errors.name = "Nama tidak boleh kosong";
    }
    if (type === "aws_key") {
      if (
        formValidate.notEmpty(getStringField(formData, "username")) ||
        formValidate.hasAnySpace(getStringField(formData, "username"))
      ) {
        errors.username = "Access Key ID tidak boleh kosong / mengandung spasi";
      }
      if (
        formValidate.notEmpty(getStringField(formData, "password")) ||
        formValidate.hasAnySpace(getStringField(formData, "password"))
      ) {
        errors.password =
          "Secret Access Key tidak boleh kosong / mengandung spasi";
      }
    } else if (type === "google_services_account") {
      if (
        formValidate.notEmpty(getStringField(formData, "value")) ||
        formValidate.hasAnySpace(getStringField(formData, "value"))
      ) {
        errors.value =
          "Service Account Key tidak boleh kosong / mengandung spasi";
      }
    } else if (type === "ssh_private_key") {
      if (formValidate.sshValidation(getStringField(formData, "value"))) {
        errors.value = "SSH Private Key tidak boleh kosong / mengandung spasi";
      }
    } else if (type === "kubeconfig") {
      if (
        formValidate.notEmpty(getStringField(formData, "value")) ||
        formValidate.hasAnySpace(getStringField(formData, "value"))
      ) {
        errors.value = "Kubeconfig tidak boleh kosong";
      }
    } else if (type === "postgresql_access" || type === "mysql_access") {
      if (
        formValidate.customValidation(
          getStringField(formData, "host"),
          (el: string) => {
            const rgx =
              /^(25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)){3}$/;

            if (el.trim() === "") return "Host tidak boleh kosong";
            if (!rgx.test(el)) return "Format IP address tidak valid";

            return "";
          }
        )
      ) {
        errors.host = "Host tidak valid";
      }
      if (
        formValidate.notEmpty(getStringField(formData, "username")) ||
        formValidate.hasAnySpace(getStringField(formData, "username"))
      ) {
        errors.username = "Username tidak boleh kosong / spasi";
      }
      if (
        formValidate.notEmpty(getStringField(formData, "password")) ||
        formValidate.hasAnySpace(getStringField(formData, "password"))
      ) {
        errors.password = "Password tidak boleh kosong / spasi";
      }
    }
  }

  if (Object.keys(errors).length > 0) {
    return new Response(JSON.stringify({ success: false, errors }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    });
  }

  if (type === "aws_key") {
    if (isUpdate) {
      query =
        "UPDATE keys SET type = ?, name = ?, username = ?, password = ? WHERE id = ?";
      values = [
        type,
        getStringField(formData, "name"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
        id,
      ];
    } else {
      query =
        "INSERT INTO keys (type, name, username, password) VALUES (?, ?, ?, ?)";
      values = [
        type,
        getStringField(formData, "name"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
      ];
    }
  } else if (type === "postgresql_access" || type === "mysql_access") {
    if (isUpdate) {
      query =
        "UPDATE keys SET type = ?, name = ?, host = ?, username = ?, password = ? WHERE id = ?";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "host"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
        id,
      ];
    } else {
      query =
        "INSERT INTO keys (type, name, host, username, password) VALUES (?, ?, ?, ?, ?)";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "host"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
      ];
    }
  } else {
    if (isUpdate) {
      query = "UPDATE keys SET type = ?, name = ?, value = ? WHERE id = ?";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "value"),
        id,
      ];
    } else {
      query = "INSERT INTO keys (type, name, value) VALUES (?, ?, ?)";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "value"),
      ];
    }
  }

  await db.run(query, values);
  return new Response(
    JSON.stringify({
      success: true,
      redirect: "/dashboard/superuser-keys",
    }),
    {
      status: 200,
      headers: { "Content-Type": "application/json" },
    }
  );
}
---

<dialog slot="dialog" class="modal" id="modal_superuser">
  <div class="modal-box">
    <Forms
      x-data="{ category_name: '', titles: { aws_key: 'AWS Key', google_services_account: 'Google Services Account', ssh_private_key: 'SSH Private Key', kubeconfig: 'Kubeconfig', postgresql_access: 'PostgreSQL', mysql_access: 'MySQL'  }, syncSuperUser() { this.category_name = selectedSuperUserKey?.type || '' } }"
      class="flex flex-col gap-6"
      action="/dashboard/superuser-keys/modal-superuser-keys"
      method="POST"
      x-effect="syncSuperUser()"
    >
      <input type="hidden" name="id" :value="selectedSuperUserKey?.id || ''" />
      <div class="flex flex-col gap-4">
        <h1
          class="text-xl font-bold"
          x-text="titles[category_name] ? `${titles[category_name]} - ${selectedSuperUserKeyId ? 'Update' : 'Create'}` : selectedSuperUserKeyId ? 'Update' : 'Create'"
        >
        </h1>
        <label>
          <select
            class="select rounded-none w-full"
            x-model="category_name"
            x-bind:disabled="selectedSuperUserKeyId"
          >
            <option disabled selected value=""> Choose Type </option>
            <option value="aws_key">AWS Key</option>
            <option value="google_services_account">
              Google Services Account
            </option>
            <option value="ssh_private_key">SSH Private Key</option>
            <option value="kubeconfig">Kubeconfig</option>
            <option value="postgresql_access">PostgreSQL Access</option>
            <option value="mysql_access">MySQL Access</option>
          </select>
          <input type="hidden" name="type" :value="category_name" />
        </label>
        <div class="flex flex-col gap-6">
          <template x-if="category_name !== ''">
            <label>
              <input
                type="text"
                placeholder="Name"
                name="name"
                class="input w-full rounded-none"
                required
                :value="selectedSuperUserKey?.name || ''"
              />
            </label>
          </template>
          <template x-if="category_name === 'aws_key'">
            <div class="flex flex-col gap-6">
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="username"
                  required
                  placeholder="Access Key Id"
                  :value="selectedSuperUserKey?.username || ''"></textarea>
              </label>
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="password"
                  required
                  placeholder="Secret Access Key"
                  :value="selectedSuperUserKey?.password || ''"></textarea>
              </label>
            </div>
          </template>
          <template x-if="category_name === 'google_services_account'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="value"
                required
                placeholder="Service Account Key"
                :value="selectedSuperUserKey?.value || ''"></textarea>
            </label>
          </template>
          <template x-if="category_name === 'ssh_private_key'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="value"
                required
                placeholder="SSH Private Key"
                :value="selectedSuperUserKey?.value || ''"></textarea>
            </label>
          </template>
          <template x-if="category_name === 'kubeconfig'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="value"
                required
                placeholder="Kubeconfig"
                :value="selectedSuperUserKey?.value || ''"></textarea>
            </label>
          </template>
          <template
            x-if="category_name === 'postgresql_access' || category_name === 'mysql_access'"
          >
            <div class="flex flex-col gap-6">
              <label>
                <input
                  type="text"
                  placeholder="Host"
                  name="host"
                  required
                  :value="selectedSuperUserKey?.host || ''"
                  class="input w-full rounded-none"
                />
              </label>
              <label>
                <input
                  type="text"
                  placeholder="Username"
                  name="username"
                  required
                  :value="selectedSuperUserKey?.username || ''"
                  class="input w-full rounded-none"
                />
              </label>
              <label>
                <input
                  type="password"
                  placeholder="Password"
                  name="password"
                  required
                  :value="selectedSuperUserKey?.password || ''"
                  class="input w-full rounded-none"
                />
              </label>
            </div>
          </template>
        </div>
      </div>
      <div class="flex gap-4">
        <button
          class="btn btn-neutral btn-outline flex-1 rounded-none"
          type="reset"
          id="cancelAction">Cancel</button
        >
        <button class="btn btn-neutral flex-1 rounded-none" type="submit"
          >Save</button
        >
      </div>
    </Forms>
  </div>
</dialog>
<script is:inline>
  const form = document.querySelector("#modal_superuser form");

  const cancelButton = document.getElementById("cancelAction");

  cancelButton.addEventListener("click", () => {
    window.formUtils.clearErrors(form);
    document.getElementById("modal_superuser")?.close();
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    window.formUtils.clearErrors(form);

    const data = new FormData(form);

    try {
      const res = await fetch(form.action, {
        method: "POST",
        body: data,
      });

      const result = await res.json();
      if (!res.ok) {
        if (result.errors) {
          for (const [field, msg] of Object.entries(result.errors)) {
            window.formUtils.showError(form, field, msg);
          }
        } else {
          alert("Terjadi kesalahan");
        }
      } else if (result.success) {
        window.location.href = result.redirect;
      }
    } catch (error) {
      alert("Error jaringan, coba lagi");
    }
  });
</script>
