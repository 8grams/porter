---
import Forms from "../../../components/Forms.astro";
import getStringField from "../../../utils/field_cast";
import { openDB } from "../../../utils/db";
import { encrypt } from "../../../utils/crypto";

const db = await openDB();

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const type = getStringField(formData, "type");
  const id = getStringField(formData, "id");
  const isUpdate = id !== "";
  let query = "";
  let values: string[] = [];

  if (type === "aws_key") {
    if (isUpdate) {
      query =
        "UPDATE keys SET type = ?, name = ?, username = ?, password = ? WHERE id = ?";
      values = [
        type,
        getStringField(formData, "name"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
        id,
      ];
    } else {
      query = "INSERT INTO keys (type, name, username, password) VALUES (?, ?, ?, ?)";
      values = [
        type,
        getStringField(formData, "name"),
        encrypt(getStringField(formData, "username")),
        encrypt(getStringField(formData, "password")),
      ];
    }
  } else if (type === "postgresql_access" || type === "mysql_access") {
    if (isUpdate) {
      query =
        "UPDATE keys SET type = ?, name = ?, host = ?, username = ?, password = ? WHERE id = ?";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "host"),
        getStringField(formData, "username"),
        getStringField(formData, "password"),
        id,
      ];
    } else {
      query =
        "INSERT INTO keys (type, name, host, username, password) VALUES (?, ?, ?, ?, ?)";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "host"),
        getStringField(formData, "username"),
        getStringField(formData, "password"),
      ];
    }
  } else {
    if (isUpdate) {
      query = "UPDATE keys SET type = ?, name = ?, value = ? WHERE id = ?";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "value"),
        id,
      ];
    } else {
      query = "INSERT INTO keys (type, name, value) VALUES (?, ?, ?)";
      values = [
        type,
        getStringField(formData, "name"),
        getStringField(formData, "value"),
      ];
    }
  }

  await db.run(query, values);
  return Astro.redirect("/dashboard/superuser-keys");
}
---

<dialog slot="dialog" class="modal" id="modal_superuser">
  <div class="modal-box">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >âœ•</button
      >
    </form>
    <Forms
      x-data="formHandler()"
      class="flex flex-col gap-6"
      action="/dashboard/superuser-keys/modal-superuser-keys"
      method="POST"
      x-effect="syncSuperUserKeys(selectedSuperUserKey)"
    >
      <input
        type="hidden"
        name="id"
        :value="selectedSuperUserKey?.id || ''"
      />
      <div class="flex flex-col gap-4">
        <h1
          class="text-xl font-bold"
          x-text="titles[category_name] ? `${titles[category_name]} - ${selectedSuperUserKeyId ? 'Update' : 'Create'}` : selectedSuperUserKeyId ? 'Update' : 'Create'"
        >
        </h1>
        <label>
          <input type="hidden" name="type" :value="category_name" />
          <select
            class="select
          rounded-none
          w-full"
            x-model="category_name"
            x-bind:disabled="typeDialog!=='Create'"
          >
            <option disabled selected value=""> Choose Type </option>
            <option value="aws_key">AWS Key</option>
            <option value="google_services_account">
              Google Services Account
            </option>
            <option value="ssh_private_key">SSH Private Key</option>
            <option value="kubeconfig">Kubeconfig</option>
            <option value="postgresql_access">PostgreSQL Access</option>
            <option value="mysql_access">MySQL Access</option>
          </select>
        </label>
        <div class="flex flex-col gap-6">
          <template x-if="category_name !== ''">
            <label>
              <input
                type="text"
                placeholder="Name"
                name="name"
                class="input w-full rounded-none"
                required
                :value="selectedSuperUserKey?.name || ''"
              />
            </label>
          </template>
          <template x-if="category_name === 'aws_key'">
            <div class="flex flex-col gap-6">
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="username"
                  required
                  placeholder="Access Key Id"
                  :value="selectedSuperUserKey?.username || ''"
                  ></textarea
                >
              </label>
              <label>
                <textarea
                  class="textarea w-full rounded-none"
                  name="password"
                  required
                  placeholder="Secret Access Key"
                  :value="selectedSuperUserKey?.password || ''"
                  ></textarea
                >
              </label>
            </div>
          </template>
          <template x-if="category_name === 'google_services_account'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="value"
                required
                placeholder="Service Account Key"
                :value="selectedSuperUserKey?.value || ''"
                ></textarea
              >
            </label>
          </template>
          <template x-if="category_name === 'ssh_private_key'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="value"
                required
                placeholder="SSH Private Key"
                :value="selectedSuperUserKey?.value || ''"
                ></textarea
              >
            </label>
          </template>
          <template x-if="category_name === 'kubeconfig'">
            <label>
              <textarea
                class="textarea w-full rounded-none"
                name="value"
                required
                placeholder="Kubeconfig"
                :value="selectedSuperUserKey?.value || ''"
                ></textarea
              >
            </label>
          </template>
          <template
            x-if="category_name === 'postgresql_access' || category_name === 'mysql_access'"
          >
            <div class="flex flex-col gap-6">
              <label>
                <input
                  type="text"
                  placeholder="Host"
                  name="host"
                  required
                  :value="selectedSuperUserKey?.host || ''"
                  class="input w-full rounded-none"
                />
              </label>
              <label>
                <input
                  type="text"
                  placeholder="Username"
                  name="username"
                  required
                  :value="selectedSuperUserKey?.username || ''"
                  class="input w-full rounded-none"
                />
              </label>
              <label>
                <input
                  type="password"
                  placeholder="Password"
                  name="password"
                  required
                  :value="selectedSuperUserKey?.password || ''"
                  class="input w-full rounded-none"
                />
              </label>
            </div>
          </template>
        </div>
      </div>
      <button type="submit" class="btn btn-neutral rounded-none w-full">
        Save
      </button>
    </Forms>
  </div>
</dialog>
<script slot="script" is:inline>
  function formHandler() {
    return {
      category_name: '',
      titles: {
        aws_key: "AWS Key",
        google_services_account: "Google Services Account",
        ssh_private_key: "SSH Private Key",
        kubeconfig: "Kubeconfig",
        postgresql_access: "PostgreSQL",
        mysql_access: "MySQL",
      },
      syncSuperUserKeys(selectedSuperUserKey) {
        console.log(selectedSuperUserKey)
        this.category_name = selectedSuperUserKey?.type || '';
      },
    };
  }
</script>
